---
- hosts: all

  vars:
    # For all homebrew related tasks,
    # remember to add the `become` and `become_user` properties.
    # So that this playbook can be used on a multiple users system.
    homebrew_user: nicholas.the.personal
    homebrew_group: admin
    homebrew_upgrade_all_packages: true

  tasks:
    - name: Let me check your password first
      command: echo "Password test in progress..."
      timeout: 1
      become: true
      changed_when: false

    - debug:
        msg: Hello, World!

    # Set up the dotfile repo #

    - name: Clone the dotfile repo into the home directory `~`
      shell:
        cmd: |
          cd ~
          git init
          git remote add origin https://github.com/NicholasTD07/dotfiles.git
          git fetch origin
          git checkout -b main origin/main
        creates: ~/.git
      register: cloned_dotfile

    - name: Update the dotfile repo
      git:
        repo: https://github.com/NicholasTD07/dotfiles.git
        dest: ~/
        version: main
      when: not cloned_dotfile.changed
      # Note: `cloned_dotfile is skipped` does not work here.
      # I assume that's because the `shell` module always runs.


    # Set up Homebrew #

    - name: Set up Homebrew (and upgrade all packages)
      include_role:
        name: geerlingguy.mac.homebrew

    # Set up Spacemacs #

    # Because Spacemacs takes so long to finish its initial bootstrap,
    # let's do it as early as we can.
    - name: Tap the Emacs Plus repository
      homebrew_tap:
        name: d12frosted/emacs-plus
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"

    # Not sure whether libvterm is needed here...
    - name: Install Emacs Plus
      homebrew:
        name: "{{ item }}"
      loop:
        - emacs-plus
        - libvterm # Is this needed though?
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"

    - name: Symlink the Emacs.app to /Applications
      file:
        src: /opt/homebrew/opt/emacs-plus/Emacs.app
        dest: /Applications/Emacs.app
        state: link

    - name: Check if Spacemacs has been initialized
      stat:
        path: ~/.emacs.d/
      register: spacemacs_stat

    - name: Keep Spacemacs up-to-date
      git:
        repo: https://github.com/syl20bnr/spacemacs.git
        dest: ~/.emacs.d/
        version: develop

    - name: Bootstrap Spacemacs if it hasn't been initialized yet
      command: emacs &
      async: 600 # Give Emacs 10 minutes to run
      poll: 0 # in the background
      when: not spacemacs_stat.stat.exists

    # Set up Vim #
    # Caveats: Vim's plugins aren't installed after this...

    - name: Install Vim
      homebrew:
        name: "{{ item }}"
      loop:
        - vim
        - cmake # needed by YouCompleteMe
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"

    - name: Check if Vim plugins are installed
      stat:
        path: ~/.vim-plugins/
      register: vim_plugins_stat

    - name: Bootstrap Vim plugins if plugins are not installed yet
      command: vim
      async: 90 # Give Vim one minute and half to run
      poll: 0 # in the background
      when: not vim_plugins_stat.stat.exists

    # Caveat: Due to the nature of how Vim and its plugins are installed,
    # YouCompleteMe won't be installed on the first run of the playbook...

    - name: Check if YouCompleteMe has been compiled
      stat:
        path: ~/.vim-plugins/plugins/YouCompleteMe/.compiled
      register: YCM_compiled

    - name: Compile YouCompleteMe
      block:
      - name: Compile YouCompleteMe
        command:
          cmd: python3 install.py
          chdir: ~/.vim-plugins/plugins/YouCompleteMe

      - name: Mark YCM as compiled
        file:
          path: ~/.vim-plugins/plugins/YouCompleteMe/.compiled
          state: touch
      when: vim_plugins_stat.stat.exists and not YCM_compiled.stat.exists

    # Install Homebrew packages and casks #

    - name: Install Homebrew packages
      homebrew:
        name: "{{ item }}"
        state: present
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"
      loop:
        # commandline utilities
        - fish
        - tree

        # git
        - git
        - git-lfs
        - ydiff # needed by git for diffing

        # editors support
        - fzf # needed by fish and also vim for searching

        - ripgrep # needed by emacs for searching
        - ispell # needed by emacs for spell checks

        # languages
        - python
        - rbenv

        # Swift

        - carthage # Until SPM solves its binary caches on CI, carthage is our friend...

        - swiftlint
        - swiftformat

        # misc
        - svn # need by the font casks

    - name: Install Homebrew Casks
      homebrew_cask:
        name: "{{ item }}"
        state: present
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"
      loop:
        # macOS must-haves
        - 1password
        - dropbox
        - firefox
        # - little-snitch

        # work / life?
        - zoom
        - slack # needed for the huddles

        # macOS quality of life improvements
        - alfred
        - bartender
        - caffeine
        - istat-menus
        - iterm2
        - moom

        # gaming
        - steam

        # streaming
        - obs
        - loopback

        # MIA
        # mas 'DaisyDisk', id: 411643860
        # mas 'GIPHY CAPTURE', id: 668208984
        # mas 'Disk Care', id: 913724705

    # Install fonts #

    - name: Tap the fonts repository
      homebrew_tap:
        name: homebrew/cask-fonts
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"

    - name: Install Homebrew Font Casks (that can be shared with other users)
      homebrew_cask:
        name: "{{ item }}"
        state: present
        install_options:
          - 'fontdir=/Users/Shared/Fonts'
      become: "{{ (homebrew_user != ansible_user_id) | bool }}"
      become_user: "{{ homebrew_user }}"
      loop:
        # fonts
        - font-inconsolata-g-for-powerline
        - font-source-code-pro
        - font-source-code-pro-for-powerline

    - name: Install the fonts
      copy:
        src: "{{ item  }}"
        dest: ~/Library/Fonts
      with_fileglob:
        - /Users/Shared/Fonts/*

    # Install Ansible #

    - name: Ensure Ansible is installed with Homebrew's pip
      pip:
        name: ansible
      vars:
        extra_path: /opt/homebrew/bin

    # Set up fishshell as the default shell #

    - name: Get fishshell's path
      command: which fish
      register: fish

    - name: Ensure fishshell is included in /etc/shells
      lineinfile:
        path: /etc/shells
        line: "{{ fish.stdout }}"
      become: true

    - name: Ensure current user's default shell is fish
      user:
        name: "{{ ansible_user_id }}"
        shell: "{{ fish.stdout }}"
      become: true


    # Configure fzf #

    - name: Get Homebrew's prefix
      command: brew --prefix
      register: brew_prefix
      changed_when: false

    - name: Configure fzf
      command:
        cmd: "{{ brew_prefix.stdout }}/opt/fzf/install"
        creates: "~/.fzf.bash"
